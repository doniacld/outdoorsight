// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	mongo "go.mongodb.org/mongo-driver/mongo"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockDB) Insert(ctx context.Context, collection string, doc interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, collection, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDBMockRecorder) Insert(ctx, collection, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDB)(nil).Insert), ctx, collection, doc)
}

// Find mocks base method
func (m *MockDB) Find(ctx context.Context, collection string, filter map[string]interface{}) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, collection, filter)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockDBMockRecorder) Find(ctx, collection, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDB)(nil).Find), ctx, collection, filter)
}

// Update mocks base method
func (m *MockDB) Update(ctx context.Context, collection string, filter map[string]interface{}, update bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, collection, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDBMockRecorder) Update(ctx, collection, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), ctx, collection, filter, update)
}

// Delete mocks base method
func (m *MockDB) Delete(ctx context.Context, collection string, filter map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, collection, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDBMockRecorder) Delete(ctx, collection, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), ctx, collection, filter)
}
