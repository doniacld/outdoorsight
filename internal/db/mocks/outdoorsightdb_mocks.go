// Code generated by MockGen. DO NOT EDIT.
// Source: /home/donia/workspace/src/github.com/doniacld/outdoorsight/internal/db/outdoorsightdb.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	db "github.com/doniacld/outdoorsight/internal/db"
	errors "github.com/doniacld/outdoorsight/internal/errors"
	spot "github.com/doniacld/outdoorsight/internal/spot"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddSpot mocks base method
func (m *MockDB) AddSpot(ctx context.Context, details db.SpotDetails) *errors.OsError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpot", ctx, details)
	ret0, _ := ret[0].(*errors.OsError)
	return ret0
}

// AddSpot indicates an expected call of AddSpot
func (mr *MockDBMockRecorder) AddSpot(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpot", reflect.TypeOf((*MockDB)(nil).AddSpot), ctx, details)
}

// GetSpot mocks base method
func (m *MockDB) GetSpot(ctx context.Context, spotName string) (spot.Details, *errors.OsError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpot", ctx, spotName)
	ret0, _ := ret[0].(spot.Details)
	ret1, _ := ret[1].(*errors.OsError)
	return ret0, ret1
}

// GetSpot indicates an expected call of GetSpot
func (mr *MockDBMockRecorder) GetSpot(ctx, spotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpot", reflect.TypeOf((*MockDB)(nil).GetSpot), ctx, spotName)
}

// DeleteSpot mocks base method
func (m *MockDB) DeleteSpot(ctx context.Context, spotName string) *errors.OsError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpot", ctx, spotName)
	ret0, _ := ret[0].(*errors.OsError)
	return ret0
}

// DeleteSpot indicates an expected call of DeleteSpot
func (mr *MockDBMockRecorder) DeleteSpot(ctx, spotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpot", reflect.TypeOf((*MockDB)(nil).DeleteSpot), ctx, spotName)
}

// UpdateSpot mocks base method
func (m *MockDB) UpdateSpot(ctx context.Context, spotName string, update db.SpotDetails) *errors.OsError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpot", ctx, spotName, update)
	ret0, _ := ret[0].(*errors.OsError)
	return ret0
}

// UpdateSpot indicates an expected call of UpdateSpot
func (mr *MockDBMockRecorder) UpdateSpot(ctx, spotName, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpot", reflect.TypeOf((*MockDB)(nil).UpdateSpot), ctx, spotName, update)
}
